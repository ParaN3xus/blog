---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "$components/FormattedDate.astro";
import Comment from "$components/Comment.astro";
import { kEnableComment, kSiteTitle, kUrlBase } from "$consts";
import BaseLayout from "./BaseLayout.astro";
import TagList from "$components/TagList.astro";
import LicenseBar from "$components/LicenseBar.astro";

interface IdExt {
  id: string;
}

type Props = CollectionEntry<"blog">["data"] & (IdExt | { id: false });

const { id, title, description, date, updatedDate, tags, license } =
  Astro.props;

const dateObj = typeof date === "string" ? new Date(date) : date;
const siteUrl = Astro.url.origin;
---

<BaseLayout
  pageTitle={`${title} | ${kSiteTitle}`}
  pageDescription={description}
>
  <main class="w-full flex flex-col flex-1">
    <article class="flex-1">
      <div class="prose prose-lg max-w-none">
        <section class="mb-8 space-y-4" aria-label="Title">
          <LicenseBar id={id} title={title} date={dateObj} license={license} />
          <div
            class="flex flex-col lg:flex-row sm:flex-wrap gap-2 text-sm opacity-70"
          >
            {
              [
                dateObj && (
                  <span>
                    <FormattedDate date={dateObj} />
                    {updatedDate && (
                      <span class="ml-1">
                        , Last updated on
                        <FormattedDate date={updatedDate || dateObj} />
                      </span>
                    )}
                  </span>
                ),
                id && (
                  <span>
                    <span id="vercount_value_page_pv" class="tabular-nums">
                      Loading...
                    </span>
                    views
                  </span>
                ),
                tags && tags.length > 0 && (
                  <TagList
                    tags={tags}
                    classes="badge badge-outline not-prose"
                  />
                ),
              ]
                .filter(Boolean)
                .map((element, index, array) => (
                  <>
                    {element}
                    {index < array.length - 1 && (
                      <span class="divider divider-horizontal mx-1 hidden lg:flex" />
                    )}
                  </>
                ))
            }
          </div>

          <h1 class="text-4xl font-bold">{title}</h1>
          <div class="divider"></div>
        </section>
        <slot />
      </div>
    </article>

    {
      id && kEnableComment && (
        <div class="w-full">
          <Comment />
        </div>
      )
    }
  </main>
</BaseLayout>
